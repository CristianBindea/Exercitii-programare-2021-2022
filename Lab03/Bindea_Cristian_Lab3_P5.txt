/*
 Bindea Gheorghe Cristian - Problema 5
Implementati algoritmii cunoscuti de ordonare a sirurilor numerice (bubble sort, insertion sort, quick sort, etc.)
si aplicati-i asupra unui sir de valori intregi citite de la tastatura.
 */

import java.util.Arrays;
import java.util.Random;

public class HelloWorld {

	public static void main(String[] args) {

		Random random = new Random();
		int n = 10;
		int[] v = new int[n];
		int[] v1 = new int[n];
		for (int i = 0; i < n; i++)
			v[i] = random.nextInt(100);

		v1 = Arrays.copyOf(v, n);
		System.out.println("Bubble Sort");
		bubbleSort(v1);
		printArray(v1);

		v1 = Arrays.copyOf(v, n);
		System.out.println("Insertion Sort");
		insertionSort(v1);
		printArray(v1);

		v1 = Arrays.copyOf(v, n);
		System.out.println("Quick Sort");
		quickSort(v1, 0, n - 1);
		printArray(v1);

	}

	public static void bubbleSort(int[] arr) {
		int n = arr.length;
		int temp = 0;
		for (int i = 0; i < n; i++)
			for (int j = 1; j < (n - i); j++)
				if (arr[j - 1] > arr[j]) {
					temp = arr[j - 1];
					arr[j - 1] = arr[j];
					arr[j] = temp;
				}
	}

	public static void insertionSort(int arr[]) {
		int n = arr.length;
		for (int i = 1; i < n; ++i) {
			int key = arr[i];
			int j = i - 1;
			while (j >= 0 && arr[j] > key) {
				arr[j + 1] = arr[j];
				j = j - 1;
			}
			arr[j + 1] = key;
		}
	}

	public static void quickSort(int arr[], int low, int high) {
		if (low < high) {
			int p = partition(arr, low, high);
			quickSort(arr, low, p - 1);
			quickSort(arr, p + 1, high);
		}
	}

	private static int partition(int arr[], int low, int high) {
		int pivot = arr[high];
		int a = low - 1;
		for (int i = low; i < high; i++) {
			if (arr[i] < pivot) {
				a++;
				int temp = arr[a];
				arr[a] = arr[i];
				arr[i] = temp;
			}
		}
		int temp = arr[a + 1];
		arr[a + 1] = pivot;
		arr[high] = temp;
		return a + 1;
	}

	public static void printArray(int arr[]) {
		int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println("\n");
	}
}